name: get-kevs
on:
  schedule:
    - cron: '*/30 * * * *'
  workflow_dispatch:

jobs:
  kevs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v 4.2.2
        with:
          token: ${{secrets.PAT}}

      - name: Download CISA KEV Catalog
        run: |
          KEV_URL="https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json"
          OUTPUT_FILE="known_exploited_vulnerabilities.json"
          
          # Download the JSON file using curl
          curl -L "$KEV_URL" -o "$OUTPUT_FILE"
          
          # Validate the downloaded file
          if ! jq empty "$OUTPUT_FILE" 2>/dev/null; then
            echo "Error: Downloaded file is not valid JSON"
            exit 1
          fi
          
          # Print catalog version and total vulnerabilities
          CATALOG_VERSION=$(jq -r '.catalogVersion' "$OUTPUT_FILE")
          TOTAL_VULNS=$(jq '.vulnerabilities | length' "$OUTPUT_FILE")
          echo "Catalog Version: $CATALOG_VERSION"
          echo "Total vulnerabilities in catalog: $TOTAL_VULNS"

      - name: Check for Changes
        id: changes
        run: |
          # Fetch the previous version of the file
          git show HEAD:known_exploited_vulnerabilities.json > previous_catalog.json 2>/dev/null || touch previous_catalog.json
          
          # Use separate jq commands to avoid long argument lists
          ADDED_VULNS=$(jq -n \
            --slurpfile old previous_catalog.json \
            --slurpfile new known_exploited_vulnerabilities.json \
            '($new[0].vulnerabilities | map(.cveID)) - ($old[0].vulnerabilities | map(.cveID) | select(. != null))')
          
          REMOVED_VULNS=$(jq -n \
            --slurpfile old previous_catalog.json \
            --slurpfile new known_exploited_vulnerabilities.json \
            '($old[0].vulnerabilities | map(.cveID)) - ($new[0].vulnerabilities | map(.cveID) | select(. != null))')
          
          CATALOG_VERSION=$(jq -r '.catalogVersion' known_exploited_vulnerabilities.json)
          
          # Check if there are actual changes
          if [ "$(echo "$ADDED_VULNS" | jq length)" -gt 0 ] || [ "$(echo "$REMOVED_VULNS" | jq length)" -gt 0 ]; then
            # Construct changes JSON
            CHANGES=$(jq -n \
              --argjson added "$ADDED_VULNS" \
              --argjson removed "$REMOVED_VULNS" \
              --arg version "$CATALOG_VERSION" \
              '{
                added_vulns: $added,
                removed_vulns: $removed,
                catalog_version: $version
              }')
            
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "details<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Commit Changes
        if: steps.changes.outputs.changes == 'true'
        run: |
          git config --global user.email "${EMAIL}"
          git config --global user.name "${NAME}"
          git remote set-url origin https://x-access-token:${PAT}@github.com/${GITHUB_REPOSITORY}.git
          git add known_exploited_vulnerabilities.json
          git commit -m "Update KEV Catalog to version ${{ fromJson(steps.changes.outputs.details).catalog_version }}"
          git push
        env:
          NAME: ${{ secrets.NAME }}
          EMAIL: ${{ secrets.EMAIL }}
          PAT: ${{ secrets.PAT }}

      - name: Create Release
        if: steps.changes.outputs.changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          TIMESTAMP=$(date +'%Y-%m-%d-%H%M%S')
          CHANGES_DETAILS='${{ steps.changes.outputs.details }}'
          
          gh release create "kev-update-${TIMESTAMP}" \
            --title "KEV Catalog Update $(echo "$CHANGES_DETAILS" | jq -r '.catalog_version')" \
            --notes "Changes in CISA Known Exploited Vulnerabilities Catalog:

          Catalog Version: $(echo "$CHANGES_DETAILS" | jq -r '.catalog_version')

          Added Vulnerabilities:
          $(echo "$CHANGES_DETAILS" | jq -r '.added_vulns | map("- " + .) | join("\n")')

          Removed Vulnerabilities:
          $(echo "$CHANGES_DETAILS" | jq -r '.removed_vulns | map("- " + .) | join("\n")')"
